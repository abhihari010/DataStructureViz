[
  {
    "title": "Maximum Depth of Binary Tree",
    "description": "Given the root of a binary tree, return its maximum depth.\nA binary tree's maximum depth is the number of nodes along the longest path from the root node down to the farthest leaf node.",
    "difficulty": "easy",
    "topic": "binary-tree",
    "methodName": "maxDepth",
    "methodSignature": {
      "parameters": [
        {
          "name": "root",
          "type": "TreeNode",
          "description": "The root of the binary tree"
        }
      ],
      "returnType": "int",
      "description": "Returns the maximum depth of the binary tree"
    },
    "testCases": [
      {"input": [3,9,20,null,null,15,7], "inputArgs": [[3,9,20,null,null,15,7]], "output": {"python": 3, "javascript": 3, "java": 3, "cpp": 3}},
      {"input": [1,null,2], "inputArgs": [[1,null,2]], "output": {"python": 2, "javascript": 2, "java": 2, "cpp": 2}},
      {"input": [], "inputArgs": [[]], "output": {"python": 0, "javascript": 0, "java": 0, "cpp": 0}},
      {"input": [1], "inputArgs": [[1]], "output": {"python": 1, "javascript": 1, "java": 1, "cpp": 1}},
      {"input": [1,2,3,4,5], "inputArgs": [[1,2,3,4,5]], "output": {"python": 3, "javascript": 3, "java": 3, "cpp": 3}}
    ],
    "solutions": {
      "java": {"code": "class Solution {\n    public int maxDepth(TreeNode root) {\n        if (root == null) return 0;\n        return 1 + Math.max(maxDepth(root.left), maxDepth(root.right));\n    }\n}"},
      "javascript": {"code": "class Solution {\n    maxDepth(root) {\n        if (!root) return 0;\n        return 1 + Math.max(this.maxDepth(root.left), this.maxDepth(root.right));\n    }\n}"},
      "python": {"code": "class Solution:\n    def maxDepth(self, root):\n        if not root:\n            return 0\n        return 1 + max(self.maxDepth(root.left), self.maxDepth(root.right))"},
      "cpp": {"code": "class Solution {\npublic:\n    int maxDepth(TreeNode* root) {\n        if (!root) return 0;\n        return 1 + max(maxDepth(root->left), maxDepth(root->right));\n    }\n};"}
    },
    "boilerPlateCode": {
      "java": "class Solution {\n    int maxDepth(TreeNode root) {\n        // Your code here\n    }\n}",
      "javascript": "class Solution {\n    maxDepth(root) {\n        // Your code here\n    }\n}",
      "python": "class Solution:\n    def maxDepth(self, root):\n        # Your code here\n        pass",
      "cpp": "class Solution {\npublic:\n    int maxDepth(TreeNode* root) {\n        // Your code here\n    }\n};"
    },
    "timeComplexity": {"default": "O(n)"},
    "spaceComplexity": {"default": "O(h)"}
  },
  {
    "title": "Lowest Common Ancestor of a Binary Search Tree",
    "description": "Given a binary search tree (BST), find the lowest common ancestor (LCA) of two given nodes in the BST. The LCA of two nodes p and q in a BST is the lowest node that has both p and q as descendants (where we allow a node to be a descendant of itself).",
    "difficulty": "easy",
    "topic": "binary-tree",
    "methodName": "lowestCommonAncestor",
    "methodSignature": {
      "parameters": [
        { "name": "root", "type": "TreeNode", "description": "The root of the BST" },
        { "name": "p", "type": "TreeNode", "description": "First node" },
        { "name": "q", "type": "TreeNode", "description": "Second node" }
      ],
      "returnType": "TreeNode",
      "description": "Returns the lowest common ancestor node of p and q"
    },
    "testCases": [
      {"input": [[6,2,8,0,4,7,9,null,null,3,5], 2, 8], "inputArgs": [[6,2,8,0,4,7,9,null,null,3,5], 2, 8], "output": {"python": 6, "javascript": 6, "java": 6, "cpp": 6}},
      {"input": [[6,2,8,0,4,7,9,null,null,3,5], 2, 4], "inputArgs": [[6,2,8,0,4,7,9,null,null,3,5], 2, 4], "output": {"python": 2, "javascript": 2, "java": 2, "cpp": 2}},
      {"input": [[2,1], 2, 1], "inputArgs": [[2,1], 2, 1], "output": {"python": 2, "javascript": 2, "java": 2, "cpp": 2}}
    ],
    "solutions": {
      "java": {"code": "class Solution {\n    public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {\n        while (root != null) {\n            if (p.val < root.val && q.val < root.val) root = root.left;\n            else if (p.val > root.val && q.val > root.val) root = root.right;\n            else return root;\n        }\n        return null;\n    }\n}"},
      "javascript": {"code": "class Solution {\n    lowestCommonAncestor(root, p, q) {\n        while (root) {\n            if (p.val < root.val && q.val < root.val) root = root.left;\n            else if (p.val > root.val && q.val > root.val) root = root.right;\n            else return root;\n        }\n        return null;\n    }\n}"},
      "python": {"code": "class Solution:\n    def lowestCommonAncestor(self, root, p, q):\n        while root:\n            if p.val < root.val and q.val < root.val:\n                root = root.left\n            elif p.val > root.val and q.val > root.val:\n                root = root.right\n            else:\n                return root"},
      "cpp": {"code": "class Solution {\npublic:\n    TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) {\n        while (root) {\n            if (p->val < root->val && q->val < root->val) root = root->left;\n            else if (p->val > root->val && q->val > root->val) root = root->right;\n            else return root;\n        }\n        return nullptr;\n    }\n};"}
    },
    "boilerPlateCode": {
      "java": "class Solution {\n    TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {\n        // Your code here\n    }\n}",
      "javascript": "class Solution {\n    lowestCommonAncestor(root, p, q) {\n        // Your code here\n    }\n}",
      "python": "class Solution:\n    def lowestCommonAncestor(self, root, p, q):\n        # Your code here\n        pass",
      "cpp": "class Solution {\npublic:\n    TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) {\n        // Your code here\n    }\n};"
    },
    "timeComplexity": {"default": "O(h)"},
    "spaceComplexity": {"default": "O(1)"}
  }
] 
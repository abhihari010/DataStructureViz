[
  {
    "title": "Two Sum",
    "description": "Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target. You may assume that each input would have exactly one solution, and you may not use the same element twice.",
    "difficulty": "easy",
    "topic": "array",
    "methodName": "twoSum",
    "methodSignature": {
      "parameters": [
        {
          "name": "nums",
          "type": "int[]",
          "description": "Array of integers"
        },
        {
          "name": "target",
          "type": "int",
          "description": "Target sum"
        }
      ],
      "returnType": "int[]",
      "description": "Returns indices of two numbers that sum to target"
    },
    "testCases": [
      {"input": [[2,7,11,15], 9], "inputArgs": [[2,7,11,15], 9], "output": {"python": [0,1], "javascript": [0,1], "java": [0,1], "cpp": [0,1]}},
      {"input": [[3,2,4], 6], "inputArgs": [[3,2,4], 6], "output": {"python": [1,2], "javascript": [1,2], "java": [1,2], "cpp": [1,2]}},
      {"input": [[3,3], 6], "inputArgs": [[3,3], 6], "output": {"python": [0,1], "javascript": [0,1], "java": [0,1], "cpp": [0,1]}},
      {"input": [[1,5,8,10,13], 18], "inputArgs": [[1,5,8,10,13], 18], "output": {"python": [2,4], "javascript": [2,4], "java": [2,4], "cpp": [2,4]}},
      {"input": [[0,4,3,0], 0], "inputArgs": [[0,4,3,0], 0], "output": {"python": [0,3], "javascript": [0,3], "java": [0,3], "cpp": [0,3]}}
    ],
    "solutions": {
      "java": {"code": "class Solution {\n    public int[] twoSum(int[] nums, int target) {\n        Map<Integer, Integer> map = new HashMap<>();\n        for (int i = 0; i < nums.length; i++) {\n            int complement = target - nums[i];\n            if (map.containsKey(complement)) {\n                return new int[]{map.get(complement), i};\n            }\n            map.put(nums[i], i);\n        }\n        return new int[]{-1, -1};\n    }\n}"},
      "javascript": {"code": "class Solution {\n    twoSum(nums, target) {\n        const map = new Map();\n        for (let i = 0; i < nums.length; i++) {\n            const complement = target - nums[i];\n            if (map.has(complement)) {\n                return [map.get(complement), i];\n            }\n            map.set(nums[i], i);\n        }\n        return [-1, -1];\n    }\n}"},
      "python": {"code": "class Solution:\n    def twoSum(self, nums, target):\n        seen = {}\n        for i, num in enumerate(nums):\n            complement = target - num\n            if complement in seen:\n                return [seen[complement], i]\n            seen[num] = i\n        return [-1, -1]"},
      "cpp": {"code": "class Solution {\npublic:\n    vector<int> twoSum(vector<int>& nums, int target) {\n        unordered_map<int, int> map;\n        for (int i = 0; i < nums.size(); i++) {\n            int complement = target - nums[i];\n            if (map.find(complement) != map.end()) {\n                return {map[complement], i};\n            }\n            map[nums[i]] = i;\n        }\n        return {-1, -1};\n    }\n};"}
    },
    "boilerPlateCode": {
      "java": "class Solution {\n    public int[] twoSum(int[] nums, int target) {\n        // Your code here\n    }\n}",
      "javascript": "class Solution {\n    twoSum(nums, target) {\n        // Your code here\n    }\n}",
      "python": "class Solution:\n    def twoSum(self, nums, target):\n        # Your code here\n        pass",
      "cpp": "class Solution {\npublic:\n    vector<int> twoSum(vector<int>& nums, int target) {\n        // Your code here\n    }\n};"
    },
    "timeComplexity": {"default": "O(n)"},
    "spaceComplexity": {"default": "O(n)"}
  }
] 